Phase: SCRules
Input:  Lookup Split Token NounChunk
Options: control = appelt

Macro: LIST

(
({NounChunk}{Token.string == ","})[0,10]
{NounChunk}
({Token.string == ","})?
{Token.category == CC}
{NounChunk}
)


Macro: ADJLIST

(
({Token.category == JJ}{Token.string == ","})[0,10]
{Token.category == JJ}
({Token.string == ","})?
{Token.category == CC}
{Token.category == JJ}
)

// 25
Rule:Participate
// NP<object> participate | take part in | be involved in [(NP<event>,)* and] NP<event> [in| from | during] [NP<time-interval> to // NP<time-interval>]
// Project managers participate in business unit management and marketing.

(
({NounChunk}):participant
({Lookup.minorType == be})?
{Lookup.minorType == participate}
(LIST|{NounChunk}):event
)

-->
:participant.Participant = {rule=Participate},
{
// "subclass" matches LHS label
  List annList = new ArrayList((AnnotationSet)bindings.get("event"));

  //sort the list by offset
  Collections.sort(annList, new OffsetComparator());

  //iterate through the matched annotations
  for(int i = 0; i < annList.size(); i++)
   {
    Annotation anAnn = (Annotation)annList.get(i);

// check that the new annotation is a NounChunk 
if ((anAnn.getType().equals("NounChunk")) )

{ 
    FeatureMap features = Factory.newFeatureMap();

// change this for a different rule name"
    features.put("rule", "Participate");
  
// change "Subclass" for a different annotation name
 annotations.add(anAnn.getStartNode(), anAnn.getEndNode(), "Event",
 features);

}
}
}
