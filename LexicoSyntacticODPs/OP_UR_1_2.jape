Phase: SCRules
Input:  Lookup Split Token NounChunk
Options: control = appelt

Macro: LIST

(
({NounChunk}{Token.string == ","})[0,10]
{NounChunk}
({Token.string == ","})?
{Token.category == CC}
{NounChunk}
)

Phase: SCRules
Input:  Lookup Split Token NounChunk
Options: control = appelt

Macro: LIST

(
({NounChunk}{Token.string == ","})[0,10]
{NounChunk}
({Token.string == ","})?
{Token.category == CC}
{NounChunk}
)

// 6.2
Rule:OP_UR
// NP<class> VB ¬ (be | have | CATV) just | only | exclusively NP<class>
// Herbivore only eat plants. 

(
({NounChunk}):class1
({Lookup.majorType == forAll})
({Token.category == VB, !Lookup.minorType == CATV, !Lookup.minorType == SCverbs}|{Token.category == VBP, !Lookup.minorType == be, !Lookup.minorType == have})
({NounChunk}):class3
)

-->
:class1.Class = {rule=OP_UR},
:class3.ObjectPropertyUniRes = {rule=OP_UR}



// 7
Rule:OP_UR2
// Herbivore eat just plants. 

(
({NounChunk}):class1
({Token.category == VB, !Lookup.minorType == CATV, !Lookup.minorType == SCverbs}|{Token.category == VBP, !Lookup.minorType == be, !Lookup.minorType == have})
({Lookup.majorType == forAll})
({Token.category == NN}|{Token.category == NNS}):class3
)

-->
:class1.Class = {rule=OP_UR2},
:class3.ObjectPropertyUniRes = {rule=OP_UR2}