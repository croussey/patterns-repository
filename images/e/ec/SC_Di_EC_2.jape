Phase: SCRules
Input:  Lookup Split Token NounChunk
Options: control = appelt

Macro: LIST

(
({NounChunk}{Token.string == ","})[0,10]
{NounChunk}
({Token.string == ","})?
{Token.category == CC}
{NounChunk}
)


Macro: ADJLIST

(
({Token.category == JJ}{Token.string == ","})[0,10]
{Token.category == JJ}
({Token.string == ","})?
{Token.category == CC}
{Token.category == JJ}
)


// 20
Rule:SC_Di_EC1
// NP<class> be  divide | split | separate in|into CD CN PARA [(NP<class >,)* and] NP<class>
// Sensors are divided into two groups: contact sensors and non-contact sensors.

(
({NounChunk}):superclass
({Token.category == IN})?
({NounChunk})?
{Lookup.minorType == be}
{Lookup.minorType == include}
{Lookup.majorType == numbers}
{Lookup.majorType == CN}
({Token.kind == punctuation})?
(LIST):subclass_Di_EC
)


-->
:superclass.Superclass = {rule=SC_Di_EC1},
{
// "subclass" matches LHS label
  List annList = new ArrayList((AnnotationSet)bindings.get("subclass_Di_EC"));

  //sort the list by offset
  Collections.sort(annList, new OffsetComparator());

  //iterate through the matched annotations
  for(int i = 0; i < annList.size(); i++)
   {
    Annotation anAnn = (Annotation)annList.get(i);

// check that the new annotation is a NounChunk 
if ((anAnn.getType().equals("NounChunk")) )

{ 
    FeatureMap features = Factory.newFeatureMap();

// change this for a different rule name"
    features.put("rule", "SC_Di_EC1");
  
// change "Subclass" for a different annotation name
 annotations.add(anAnn.getStartNode(), anAnn.getEndNode(), "Subclass_Di_EC",
 features);

}
}
}

